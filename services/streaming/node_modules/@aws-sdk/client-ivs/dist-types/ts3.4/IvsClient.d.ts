import { EndpointsInputConfig, EndpointsResolvedConfig, RegionInputConfig, RegionResolvedConfig } from "@aws-sdk/config-resolver";
import { HostHeaderInputConfig, HostHeaderResolvedConfig } from "@aws-sdk/middleware-host-header";
import { RetryInputConfig, RetryResolvedConfig } from "@aws-sdk/middleware-retry";
import { AwsAuthInputConfig, AwsAuthResolvedConfig } from "@aws-sdk/middleware-signing";
import { UserAgentInputConfig, UserAgentResolvedConfig } from "@aws-sdk/middleware-user-agent";
import { HttpHandler as __HttpHandler } from "@aws-sdk/protocol-http";
import { Client as __Client, DefaultsMode, SmithyConfiguration as __SmithyConfiguration, SmithyResolvedConfiguration as __SmithyResolvedConfiguration } from "@aws-sdk/smithy-client";
import { BodyLengthCalculator as __BodyLengthCalculator, Credentials as __Credentials, Decoder as __Decoder, Encoder as __Encoder, HashConstructor as __HashConstructor, HttpHandlerOptions as __HttpHandlerOptions, Logger as __Logger, Provider as __Provider, Provider, RegionInfoProvider, StreamCollector as __StreamCollector, UrlParser as __UrlParser, UserAgent as __UserAgent } from "@aws-sdk/types";
import { BatchGetChannelCommandInput, BatchGetChannelCommandOutput } from "./commands/BatchGetChannelCommand";
import { BatchGetStreamKeyCommandInput, BatchGetStreamKeyCommandOutput } from "./commands/BatchGetStreamKeyCommand";
import { CreateChannelCommandInput, CreateChannelCommandOutput } from "./commands/CreateChannelCommand";
import { CreateRecordingConfigurationCommandInput, CreateRecordingConfigurationCommandOutput } from "./commands/CreateRecordingConfigurationCommand";
import { CreateStreamKeyCommandInput, CreateStreamKeyCommandOutput } from "./commands/CreateStreamKeyCommand";
import { DeleteChannelCommandInput, DeleteChannelCommandOutput } from "./commands/DeleteChannelCommand";
import { DeletePlaybackKeyPairCommandInput, DeletePlaybackKeyPairCommandOutput } from "./commands/DeletePlaybackKeyPairCommand";
import { DeleteRecordingConfigurationCommandInput, DeleteRecordingConfigurationCommandOutput } from "./commands/DeleteRecordingConfigurationCommand";
import { DeleteStreamKeyCommandInput, DeleteStreamKeyCommandOutput } from "./commands/DeleteStreamKeyCommand";
import { GetChannelCommandInput, GetChannelCommandOutput } from "./commands/GetChannelCommand";
import { GetPlaybackKeyPairCommandInput, GetPlaybackKeyPairCommandOutput } from "./commands/GetPlaybackKeyPairCommand";
import { GetRecordingConfigurationCommandInput, GetRecordingConfigurationCommandOutput } from "./commands/GetRecordingConfigurationCommand";
import { GetStreamCommandInput, GetStreamCommandOutput } from "./commands/GetStreamCommand";
import { GetStreamKeyCommandInput, GetStreamKeyCommandOutput } from "./commands/GetStreamKeyCommand";
import { GetStreamSessionCommandInput, GetStreamSessionCommandOutput } from "./commands/GetStreamSessionCommand";
import { ImportPlaybackKeyPairCommandInput, ImportPlaybackKeyPairCommandOutput } from "./commands/ImportPlaybackKeyPairCommand";
import { ListChannelsCommandInput, ListChannelsCommandOutput } from "./commands/ListChannelsCommand";
import { ListPlaybackKeyPairsCommandInput, ListPlaybackKeyPairsCommandOutput } from "./commands/ListPlaybackKeyPairsCommand";
import { ListRecordingConfigurationsCommandInput, ListRecordingConfigurationsCommandOutput } from "./commands/ListRecordingConfigurationsCommand";
import { ListStreamKeysCommandInput, ListStreamKeysCommandOutput } from "./commands/ListStreamKeysCommand";
import { ListStreamsCommandInput, ListStreamsCommandOutput } from "./commands/ListStreamsCommand";
import { ListStreamSessionsCommandInput, ListStreamSessionsCommandOutput } from "./commands/ListStreamSessionsCommand";
import { ListTagsForResourceCommandInput, ListTagsForResourceCommandOutput } from "./commands/ListTagsForResourceCommand";
import { PutMetadataCommandInput, PutMetadataCommandOutput } from "./commands/PutMetadataCommand";
import { StopStreamCommandInput, StopStreamCommandOutput } from "./commands/StopStreamCommand";
import { TagResourceCommandInput, TagResourceCommandOutput } from "./commands/TagResourceCommand";
import { UntagResourceCommandInput, UntagResourceCommandOutput } from "./commands/UntagResourceCommand";
import { UpdateChannelCommandInput, UpdateChannelCommandOutput } from "./commands/UpdateChannelCommand";
export declare type ServiceInputTypes = BatchGetChannelCommandInput | BatchGetStreamKeyCommandInput | CreateChannelCommandInput | CreateRecordingConfigurationCommandInput | CreateStreamKeyCommandInput | DeleteChannelCommandInput | DeletePlaybackKeyPairCommandInput | DeleteRecordingConfigurationCommandInput | DeleteStreamKeyCommandInput | GetChannelCommandInput | GetPlaybackKeyPairCommandInput | GetRecordingConfigurationCommandInput | GetStreamCommandInput | GetStreamKeyCommandInput | GetStreamSessionCommandInput | ImportPlaybackKeyPairCommandInput | ListChannelsCommandInput | ListPlaybackKeyPairsCommandInput | ListRecordingConfigurationsCommandInput | ListStreamKeysCommandInput | ListStreamSessionsCommandInput | ListStreamsCommandInput | ListTagsForResourceCommandInput | PutMetadataCommandInput | StopStreamCommandInput | TagResourceCommandInput | UntagResourceCommandInput | UpdateChannelCommandInput;
export declare type ServiceOutputTypes = BatchGetChannelCommandOutput | BatchGetStreamKeyCommandOutput | CreateChannelCommandOutput | CreateRecordingConfigurationCommandOutput | CreateStreamKeyCommandOutput | DeleteChannelCommandOutput | DeletePlaybackKeyPairCommandOutput | DeleteRecordingConfigurationCommandOutput | DeleteStreamKeyCommandOutput | GetChannelCommandOutput | GetPlaybackKeyPairCommandOutput | GetRecordingConfigurationCommandOutput | GetStreamCommandOutput | GetStreamKeyCommandOutput | GetStreamSessionCommandOutput | ImportPlaybackKeyPairCommandOutput | ListChannelsCommandOutput | ListPlaybackKeyPairsCommandOutput | ListRecordingConfigurationsCommandOutput | ListStreamKeysCommandOutput | ListStreamSessionsCommandOutput | ListStreamsCommandOutput | ListTagsForResourceCommandOutput | PutMetadataCommandOutput | StopStreamCommandOutput | TagResourceCommandOutput | UntagResourceCommandOutput | UpdateChannelCommandOutput;
export interface ClientDefaults extends Partial<__SmithyResolvedConfiguration<__HttpHandlerOptions>> {
    
    requestHandler?: __HttpHandler;
    
    sha256?: __HashConstructor;
    
    urlParser?: __UrlParser;
    
    bodyLengthChecker?: __BodyLengthCalculator;
    
    streamCollector?: __StreamCollector;
    
    base64Decoder?: __Decoder;
    
    base64Encoder?: __Encoder;
    
    utf8Decoder?: __Decoder;
    
    utf8Encoder?: __Encoder;
    
    runtime?: string;
    
    disableHostPrefix?: boolean;
    
    maxAttempts?: number | __Provider<number>;
    
    retryMode?: string | __Provider<string>;
    
    logger?: __Logger;
    
    useDualstackEndpoint?: boolean | __Provider<boolean>;
    
    useFipsEndpoint?: boolean | __Provider<boolean>;
    
    serviceId?: string;
    
    region?: string | __Provider<string>;
    
    credentialDefaultProvider?: (input: any) => __Provider<__Credentials>;
    
    regionInfoProvider?: RegionInfoProvider;
    
    defaultUserAgentProvider?: Provider<__UserAgent>;
    
    defaultsMode?: DefaultsMode | Provider<DefaultsMode>;
}
declare type IvsClientConfigType = Partial<__SmithyConfiguration<__HttpHandlerOptions>> & ClientDefaults & RegionInputConfig & EndpointsInputConfig & RetryInputConfig & HostHeaderInputConfig & AwsAuthInputConfig & UserAgentInputConfig;

export interface IvsClientConfig extends IvsClientConfigType {
}
declare type IvsClientResolvedConfigType = __SmithyResolvedConfiguration<__HttpHandlerOptions> & Required<ClientDefaults> & RegionResolvedConfig & EndpointsResolvedConfig & RetryResolvedConfig & HostHeaderResolvedConfig & AwsAuthResolvedConfig & UserAgentResolvedConfig;

export interface IvsClientResolvedConfig extends IvsClientResolvedConfigType {
}

export declare class IvsClient extends __Client<__HttpHandlerOptions, ServiceInputTypes, ServiceOutputTypes, IvsClientResolvedConfig> {
    
    readonly config: IvsClientResolvedConfig;
    constructor(configuration: IvsClientConfig);
    
    destroy(): void;
}
export {};
